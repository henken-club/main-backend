interface Node {
  id: ID!
}

interface Edge {
  cursor: String!
  node: Node!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Answer implements Node {
  id: ID!
  comment: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: AnswerType!
  henken: Henken!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum AnswerType {
  RIGHT
  WRONG
}

type AnswerEdge implements Edge {
  cursor: String!
  node: Answer!
}

type AnswerConnection implements Connection {
  edges: [AnswerEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

interface Connection {
  edges: [Edge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type FindAnswerPayload {
  answer: Answer
}

type Book implements Node & Content @key(fields: "id") {
  id: ID!
}

interface Content {
  id: ID!
}

type BookEdge implements Edge {
  cursor: String!
  node: Book!
}

type BookSeries implements Node & Content @key(fields: "id") {
  id: ID!
}

type BookSeriesEdge implements Edge {
  cursor: String!
  node: BookSeries!
}

type Henken implements Node {
  id: ID!
  comment: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: ContentUnion!
  postedBy: User!
  postsTo: User!
  answer: Answer
}

union ContentUnion = Book | BookSeries

type HenkenEdge implements Edge {
  cursor: String!
  node: Henken!
}

type HenkenConnection implements Connection {
  edges: [HenkenEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type FindBookPayload {
  book: Book
}

type FindBookSeriesPayload {
  series: BookSeries
}

type Following implements Node {
  id: ID!
  from: User!
  to: User!
}

type FollowingEdge implements Edge {
  cursor: String!
  node: Following!
}

type FollowingConnection implements Connection {
  edges: [FollowingEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type User implements Node {
  id: ID!
  alias: String!
  followees(first: Int, after: String, last: Int, before: String, orderBy: FollowingOrder!): FollowingConnection!
  followers(first: Int, after: String, last: Int, before: String, orderBy: FollowingOrder!): FollowingConnection!
  postsHenkens(first: Int, after: String, last: Int, before: String, orderBy: HenkenOrder!, filter: UserPostsHenkensFilter): HenkenConnection!
  receivedHenkens(first: Int, after: String, last: Int, before: String, orderBy: HenkenOrder!, filter: UserReceivedHenkensFilter): HenkenConnection!
  postsAnswers(first: Int, after: String, last: Int, before: String, orderBy: AnswerOrder!, filter: UserPostsAnswersFilter): AnswerConnection!
  receivedAnswers(first: Int, after: String, last: Int, before: String, orderBy: AnswerOrder!, filter: UserReceivedAnswersFilter): AnswerConnection!
}

input FollowingOrder {
  direction: OrderDirection!
  field: FollowingOrderField!
}

enum OrderDirection {
  ASC
  DESC
}

enum FollowingOrderField {
  CREATED_AT
}

input HenkenOrder {
  direction: OrderDirection!
  field: HenkenOrderField!
}

enum HenkenOrderField {
  CREATED_AT
  UPDATED_AT
}

input UserPostsHenkensFilter {
  to: ID!
}

input UserReceivedHenkensFilter {
  from: ID!
}

input AnswerOrder {
  direction: OrderDirection!
  field: AnswerOrderField!
}

enum AnswerOrderField {
  CREATED_AT
  UPDATED_AT
}

input UserPostsAnswersFilter {
  from: ID!
}

input UserReceivedAnswersFilter {
  to: ID!
}

type FindHenkenPayload {
  henken: Henken
}

type CreateHenkenPayload {
  henken: Henken!
}

type FindUserPayload {
  user: User
}

type Query {
  henken(id: ID!): Henken!
  findHenken(id: ID!): FindHenkenPayload!
  answer(id: ID!): Answer!
  findAnswer(id: ID!): FindAnswerPayload!
  user(id: ID!): User!
  findUser(id: ID, alias: String): FindUserPayload!

  """Return current user. Return `null` if user not registered"""
  viewer: User
  book(id: ID!): Book!
  findBook(id: ID!): FindBookPayload!
  bookSeries(id: ID!): BookSeries!
  findBookSeries(id: ID!): FindBookSeriesPayload!
}

type Mutation {
  createHenken(to: ID!, content: ID!, comment: String = ""): CreateHenkenPayload!
}
